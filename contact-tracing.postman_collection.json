{
	"info": {
		"_postman_id": "9d58b805-e71c-4881-aec7-c707ddeb4c30",
		"name": "Contact Tracing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Healthcheck",
			"item": [
				{
					"name": "API",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ba73537-7c2f-4d8b-b209-4b0f579d0ca5",
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/healthcheck",
							"host": [
								"{{api}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c774e93-a590-47bf-9a78-d99a13282b14",
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{push}}/healthcheck",
							"host": [
								"{{push}}"
							],
							"path": [
								"healthcheck"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Registration",
			"item": [
				{
					"name": "Register account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a67452-2268-4097-a92a-252cf1a165c4",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'nonce'",
									"  ],",
									"  properties: {",
									"    nonce: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('nonce', json.nonce)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a8f7616-6c2e-4c7d-ae28-5b1fb78f5747",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'refreshToken',",
									"    'token'",
									"  ],",
									"  properties: {",
									"    refreshToken: {",
									"      type: 'string'",
									"    },",
									"    token: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('refreshToken', json.refreshToken)",
									"pm.environment.set('token', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "nonce",
									"value": "{{nonce}}",
									"type": "text"
								},
								{
									"key": "platform",
									"value": "test",
									"type": "text"
								},
								{
									"key": "deviceVerificationPayload",
									"value": "{{registerToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0253656c-c6ee-4ba1-986d-d8192a835619",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "81e52288-a6ad-40c9-84b6-5ae3822613de",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72383640-f9c8-451a-96f1-5133b83a2415",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'token'",
									"  ],",
									"  properties: {",
									"    token: {",
									"      type: 'string'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('token', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{api}}/refresh",
							"host": [
								"{{api}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data",
			"item": [
				{
					"name": "Get all settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ff0cf49-9103-47d9-9582-ff8d52132772",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get exposures settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eeb65353-174e-4fbe-bf22-1daa3efe7b5d",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings/exposures",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings",
								"exposures"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get language settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "429234cb-1abe-4502-88e3-3248ba1a3adb",
								"exec": [
									"const schema = {",
									"    type: 'object',",
									"    additionalProperties: true,",
									"    required: [",
									"        'generatedAt'",
									"    ],",
									"    properties: {",
									"        generatedAt: {",
									"            type: 'string',",
									"            format: 'date-time'",
									"        }",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/settings/language",
							"host": [
								"{{api}}"
							],
							"path": [
								"settings",
								"language"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6801057-8660-4212-9f46-a9fb0fbf7852",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'generatedAt',",
									"    'checkIns',",
									"    'installs',",
									"    'statistics',",
									"    'chart',",
									"    'counties',",
									"    'currentCases',",
									"    'hospitalised',",
									"    'requiredICU'",
									"  ],",
									"  properties: {",
									"    generatedAt: {",
									"      type: 'string',",
									"      format: 'date-time'",
									"    },",
									"    checkIns: {",
									"      type: 'object',",
									"      additionalProperties: false,",
									"      required: [",
									"        'total',",
									"        'ok'",
									"      ],",
									"      properties: {",
									"        total: {",
									"          type: 'integer'",
									"        },",
									"        ok: {",
									"          type: 'integer'",
									"        }",
									"      }",
									"    },",
									"    installs: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    statistics: {",
									"      type: 'object',",
									"      additionalProperties: false,",
									"      required: [",
									"        'confirmed',",
									"        'deaths',",
									"        'recovered',",
									"        'hospitalised',",
									"        'requiredICU',",
									"        'transmission',",
									"        'lastUpdated'",
									"      ],",
									"      properties: {",
									"        confirmed: {",
									"          type: 'integer'",
									"        },",
									"        deaths: {",
									"          type: 'integer'",
									"        },",
									"        recovered: {",
									"          type: 'integer'",
									"        },",
									"        hospitalised: {",
									"          type: 'integer'",
									"        },",
									"        requiredICU: {",
									"          type: 'integer'",
									"        },",
									"        transmission: {",
									"          type: 'object',",
									"          additionalProperties: false,",
									"          required: [",
									"            'community',",
									"            'closeContact',",
									"            'travelAbroad'",
									"          ],",
									"          properties: {",
									"            community: {",
									"              type: 'integer'",
									"            },",
									"            closeContact: {",
									"              type: 'integer'",
									"            },",
									"            travelAbroad: {",
									"              type: 'integer'",
									"            }",
									"          }",
									"        },",
									"        lastUpdated: {",
									"          type: 'object',",
									"          additionalProperties: false,",
									"          required: [",
									"            'stats',",
									"            'profile'",
									"          ],",
									"          properties: {",
									"            stats: {",
									"              type: 'string',",
									"              format: 'date-time'",
									"            },",
									"            profile: {",
									"              type: 'string',",
									"              format: 'date-time'",
									"            }",
									"          }",
									"        }",
									"      }",
									"    },",
									"    chart: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    counties: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'object',",
									"        additionalProperties: false,",
									"        required: [",
									"          'county',",
									"          'cases'",
									"        ],",
									"        properties: {",
									"          county: {",
									"            type: 'string'",
									"          },",
									"          cases: {",
									"            type: 'integer'",
									"          }",
									"        }",
									"      }",
									"    },",
									"    currentCases: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    hospitalised: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    requiredICU: {",
									"      type: 'array',",
									"      additionalItems: false,",
									"      items: {",
									"        type: 'array',",
									"        additionalItems: false,",
									"        items: {",
									"          type: [",
									"            'integer',",
									"            'string',",
									"            'null'",
									"          ]",
									"        }",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/stats",
							"host": [
								"{{api}}"
							],
							"path": [
								"stats"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Check-in",
			"item": [
				{
					"name": "Check-in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "153c1520-3eb6-4593-9a5e-62107063fef3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "adab11f0-2e2f-4d45-8237-287b03b427ae",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ageRange\": \"21-30\",\n  \"locality\": \"Dublin\",\n  \"sex\": \"m\",\n  \"ok\": true,\n  \"data\": [\n    {\n      \"status\": \"u\",\n      \"date\": \"20/04/2020\",\n      \"fever\": 0,\n      \"cough\": 1,\n      \"breath\": 0,\n      \"flu\": 0\n    },\n    {\n      \"status\": \"u\",\n      \"date\": \"19/04/2020\",\n      \"fever\": 0,\n      \"cough\": 1,\n      \"breath\": 0,\n      \"flu\": 0\n    },\n    {\n      \"status\": \"u\",\n      \"date\": \"18/04/2020\",\n      \"fever\": 0,\n      \"cough\": 1,\n      \"breath\": 0,\n      \"flu\": 0\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/check-in",
							"host": [
								"{{api}}"
							],
							"path": [
								"check-in"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publish keys (token)",
			"item": [
				{
					"name": "Notify positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ff32304-47e9-46ba-9249-6fac811dcb26",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'code', 'error', 'expiresAt', 'expiresAtTimestamp', 'smsSent'",
									"  ],",
									"  properties: {",
									"    code: {",
									"      type: 'string'",
									"    },",
									"    error: {",
									"      type: 'string'",
									"    },",
									"    expiresAt: {",
									"      type: 'string'",
									"    },",
									"    expiresAtTimestamp: {",
									"      type: 'string'",
									"    },",
									"    smsSent: {",
									"      type: 'boolean'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('code', json.code.toString())",
									"",
									"const control = CryptoJS.SHA512(json.code.toString().substr(0, Math.floor(json.code.length / 2))).toString(CryptoJS.enc.Hex)",
									"const code = CryptoJS.SHA512(json.code.toString()).toString(CryptoJS.enc.Hex)",
									"",
									"pm.environment.set('uploadHash', `${control}${code}`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{pushToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"onsetDate\": \"2020-01-01\",\r\n    \"testDate\": \"2020-01-01\",\r\n    \"jobId\": \"{{$randomUUID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								},
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{push}}/notify/positive",
							"host": [
								"{{push}}"
							],
							"path": [
								"notify",
								"positive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73ff2ec8-9a97-424a-8d3a-eca3d675255d",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'token'",
									"  ],",
									"  properties: {",
									"    token: {",
									"      type: 'string',",
									"      format: 'uuid'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('uploadToken', json.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hash\": \"{{uploadHash}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/exposures/verify",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abb36b7a-9dfe-4137-96f5-eed0fae18ded",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"token\": \"{{uploadToken}}\",\n\t\"platform\": \"test\",\n\t\"deviceVerificationPayload\": \"{{registerToken}}\",\n\t\"exposures\": [\n\t\t{\n\t\t\t\"transmissionRiskLevel\": 0,\n\t\t\t\"rollingStartNumber\": 2655169,\n\t\t\t\"keyData\": \"zTN+p+GtGfalW2VRJzB5BQ==\",\n\t\t\t\"rollingPeriod\": 144\n\t\t},\n\t\t{\n\t\t\t\"transmissionRiskLevel\": 0,\n\t\t\t\"rollingStartNumber\": 2655169,\n\t\t\t\"keyData\": \"aXx+Y+vsFxahG6BcRh5cRH==\",\n\t\t\t\"rollingPeriod\": 144\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/exposures",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Publish keys (certificate)",
			"item": [
				{
					"name": "Issue code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99dbbcc6-5c57-4643-8b2d-6aa5090e7655",
								"exec": [
									"const schema = {",
									"  type: 'object',",
									"  additionalProperties: false,",
									"  required: [",
									"    'code', 'error', 'expiresAt', 'expiresAtTimestamp', 'smsSent'",
									"  ],",
									"  properties: {",
									"    code: {",
									"      type: 'string'",
									"    },",
									"    error: {",
									"      type: 'string'",
									"    },",
									"    expiresAt: {",
									"      type: 'string'",
									"    },",
									"    expiresAtTimestamp: {",
									"      type: 'string'",
									"    },",
									"    smsSent: {",
									"      type: 'boolean'",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('code', json.code.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{pushToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"symptomDate\": \"2020-01-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								},
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{push}}/issue",
							"host": [
								"{{push}}"
							],
							"path": [
								"issue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange code for token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ac8aa97-413e-488e-8cca-507abf7e5494",
								"exec": [
									"const schema = {\r",
									"  type: 'object',\r",
									"  additionalProperties: false,\r",
									"  required: [\r",
									"    'testtype', 'symptomDate', 'token', 'error'\r",
									"  ],\r",
									"  properties: {\r",
									"    testtype: {\r",
									"      type: 'string',\r",
									"      enum: ['confirmed', 'likely', 'negative']\r",
									"    },\r",
									"    symptomDate: {\r",
									"      type: 'string',\r",
									"      format: 'date'\r",
									"    },\r",
									"    token: {\r",
									"      type: 'string'\r",
									"    },\r",
									"    error: {\r",
									"      type: 'string'\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"const json = pm.response.json()\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"  pm.expect(tv4.validate(json, schema)).to.be.true\r",
									"})\r",
									"\r",
									"pm.environment.set('certificateToken', json.token.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"code\": \"{{code}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/verify",
							"host": [
								"{{api}}"
							],
							"path": [
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exchange token for certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "590e23c0-1747-4f11-a0ec-598dd2dd42e3",
								"exec": [
									"const schema = {\r",
									"  type: 'object',\r",
									"  additionalProperties: false,\r",
									"  required: [\r",
									"    'certificate', 'error'\r",
									"  ],\r",
									"  properties: {\r",
									"    certificate: {\r",
									"      type: 'string'\r",
									"    },\r",
									"    error: {\r",
									"      type: 'string'\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"const json = pm.response.json()\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"  pm.response.to.have.status(200)\r",
									"})\r",
									"\r",
									"pm.test('Schema is valid', () => {\r",
									"  pm.expect(tv4.validate(json, schema)).to.be.true\r",
									"})\r",
									"\r",
									"pm.environment.set('certificate', json.certificate.toString())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{certificateToken}}\",\r\n    \"ekeyhmac\": \"TSNqhYMKOYD+WqPdApJBX1+0n/c0C6cwV+sPYnv9aLQ=\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/certificate",
							"host": [
								"{{api}}"
							],
							"path": [
								"certificate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50a8a5a5-e73c-4ceb-af43-89e4efb111a6",
								"exec": [
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"hmackey\": \"blUierXcpJjgf/fRAR54pfInFPHPs4aWFB6vQ3B4gI+pp1MBMj4yPmJLyK5VlT09n3E/9Fh4stCiWbdmrb/B7SsmJ3x9vOupPuwcHFTAsGGRXEw0X7lG/Bz6SgzIKa3Bgbg7Jr5DSiIVciSuL15biPcW+LFxzkmiOBihZy8J6Fs=\",\n\t\"verificationPayload\": \"{{certificate}}\",\n\t\"appPackageName\": \"{{appPackageName}}\",\n\t\"platform\": \"test\",\n\t\"deviceVerificationPayload\": \"{{registerToken}}\",\n\t\"regions\": [\n\t\t\"IE\"\n\t],\n\t\"temporaryExposureKeys\": [\n\t\t{\n\t\t\t\"transmissionRiskLevel\": 0,\n\t\t\t\"rollingStartNumber\": 2655169,\n\t\t\t\"keyData\": \"zTN+p+GtGfalW2VRJzB5BQ==\",\n\t\t\t\"rollingPeriod\": 144\n\t\t},\n\t\t{\n\t\t\t\"transmissionRiskLevel\": 0,\n\t\t\t\"rollingStartNumber\": 2655169,\n\t\t\t\"keyData\": \"aXx+Y+vsFxahG6BcRh5cRH==\",\n\t\t\t\"rollingPeriod\": 144\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/exposures",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Download keys",
			"item": [
				{
					"name": "List exposures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a748a71-ca84-48a0-8ad1-38b65d4db0f7",
								"exec": [
									"const schema = {",
									"  type: 'array',",
									"  additionalItems: false,",
									"  items: {",
									"    type: 'object',",
									"    additionalProperties: false,",
									"    required: [",
									"      'id',",
									"      'path'",
									"    ],",
									"    properties: {",
									"      id: {",
									"        type: 'integer'",
									"      },",
									"      path: {",
									"        type: 'string'",
									"      }",
									"    }",
									"  }",
									"}",
									"",
									"const json = pm.response.json()",
									"",
									"pm.test('Status code is 200', () => {",
									"  pm.response.to.have.status(200)",
									"})",
									"",
									"pm.test('Schema is valid', () => {",
									"  pm.expect(tv4.validate(json, schema)).to.be.true",
									"})",
									"",
									"pm.environment.set('exposurePath', json[0].path)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api}}/exposures?since=0",
							"host": [
								"{{api}}"
							],
							"path": [
								"exposures"
							],
							"query": [
								{
									"key": "since",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Download exposures",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b3eef68-c2b8-458a-be76-9930705bb67b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/zip",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api}}/data/{{exposurePath}}",
							"host": [
								"{{api}}"
							],
							"path": [
								"data",
								"{{exposurePath}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Callback",
			"item": [
				{
					"name": "Request callback",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"closeContactDate\": 1591005554175,\n\t\"mobile\": \"{{mobile}}\",\n\t\"payload\": {\n\t\t\"matchedKeys\": 3,\n        \"attenuations\": \"5,10,15\",\n        \"maxRiskScore\": 74\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/callback",
							"host": [
								"{{api}}"
							],
							"path": [
								"callback"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "Post event",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"event\": \"CHECK_IN\",\r\n    \"os\": \"android\",\r\n    \"payload\": {\r\n        \"data\": [1, 2, 3]\r\n    },\r\n    \"version\": \"1.0.0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api}}/metrics",
							"host": [
								"{{api}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "List metrics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{metricsToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{push}}/metrics?startDate=2020-05-01&endDate=2020-08-31&summary=true",
							"host": [
								"{{push}}"
							],
							"path": [
								"metrics"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2020-05-01"
								},
								{
									"key": "endDate",
									"value": "2020-08-31"
								},
								{
									"key": "summary",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Forget",
			"item": [
				{
					"name": "Forget account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc5eef95-86fb-4b6b-bddb-24bbf8a2a859",
								"exec": [
									"pm.test('Status code is 204', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api}}/register",
							"host": [
								"{{api}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PHA",
			"item": [
				{
					"name": "Register cognito account",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"foo@baz\",\r\n    \"password\": \"Foobar123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{push}}/pha/register",
							"host": [
								"{{push}}"
							],
							"path": [
								"pha",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cognito login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"foo@baz\",\r\n    \"password\": \"Foobar123$\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{push}}/pha/login",
							"host": [
								"{{push}}"
							],
							"path": [
								"pha",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check cognito session",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{pha-token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{push}}/pha/check",
							"host": [
								"{{push}}"
							],
							"path": [
								"pha",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "Notify positive with Cognito Token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"token\": \"{{pha-token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{push}}/pha/notify",
							"host": [
								"{{push}}"
							],
							"path": [
								"pha",
								"notify"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f839f9de-0388-46c0-a3a6-0042d35846cc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "97a38c1e-e6eb-490c-86bc-8bc67296412b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c6615255-57b9-43d6-8a3c-24f57b371644",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "73ae9307-99bb-406f-9596-9800efabac23",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}